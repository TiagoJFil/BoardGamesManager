{
  "openapi": "3.0.1",
  "info": {
    "title": "BORGA",
    "description": "Manage your games collection.",
    "termsOfService": "http://swagger.io/terms/",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Games",
      "description": "All the games available in Board Game Atlas.",
      "externalDocs": {
        "description": "Based on",
        "url": "https://api.boardgameatlas.com"
      }
    },
    {
      "name": "User",
      "description": "Users operations"
    },
    {
      "name": "MyGroups",
      "description": "Your personal games collection"
    }
  ],
  "paths": {
    "/api/all/games": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Find a game by name",
        "description": "Uses boardgameatlas API to find a game corresponding to the name.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of game to search",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Monopoly"
          }
        ],
        "responses": {
          "200": {
            "description": "A game has been found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListResponse"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "404": {
            "description": "No game found for the query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "Boardgameatlas API is not responding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    },
    "/api/all/games/rank": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Return the list of 10 most popular games.",
        "description": "Uses boardgameatlas API to find the top 10 ranked games.",
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "description": "Count of how many games you want to get",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List has been retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListResponse"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "404": {
            "description": "No such rank found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "Boardgameatlas API is not responding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    },
    "/api/all/games/details/": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get a game details by id",
        "description": "Retrieves the details of a game with the mechanics and categories included.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "id of game to get the details from",
            "required": true,
            "schema": {
              "type": "string",
              "example": "TAAifFP590"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details retrieved sucessfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDetails"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "404": {
            "description": "No game found for the query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "Boardgameatlas API is not responding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{name}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates an new user",
        "description": "Creates a user and returns it with its associated bearer token",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the user to create",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Pedro"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password to associate with the user",
            "example": "abc123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    },
    "/api/my/group/{groupId}": {
      "get": {
        "tags": [
          "MyGroups"
        ],
        "summary": "Get group detail",
        "description": "Get the details of a group, with its name, description and names of the included games.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Group found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "401": {
            "description": "Missing API token. The user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthenticated"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MyGroups"
        ],
        "summary": "Delete group",
        "description": "Deletes a group from the personal collection and returns the personal collection.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group to delete",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGroup"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "401": {
            "description": "Missing API token. The user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthenticated"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    },
    "/api/my/group": {
      "get": {
        "tags": [
          "MyGroups"
        ],
        "summary": "List all groups",
        "description": "Returns a list of groups",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Group list found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGroup"
                }
              }
            }
          },
          "401": {
            "description": "Missing API token. The user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthenticated"
                }
              }
            }
          },
          "404": {
            "description": "Group List not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "MyGroups"
        ],
        "summary": "Add a group to the personal collection",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "New groups name and description",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddGroupHeader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedGroup"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "401": {
            "description": "Missing API token. The user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthenticated"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MyGroups"
        ],
        "summary": "Edit group name and description",
        "description": "Edit group by changing its name and description, returns the updated group.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Group's Id, new name and new description",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGroupHeader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "401": {
            "description": "Missing API token. The user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthenticated"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    },
    "/api/my/group/games": {
      "post": {
        "tags": [
          "MyGroups"
        ],
        "summary": "Add a game to the group",
        "description": "Adds a game to the group at your choice",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Group's name and new gameid",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddGame"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game id added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "401": {
            "description": "Missing API token. The user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthenticated"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    },
    "/api/my/group/games/{groupId}/{gameId}": {
      "delete": {
        "tags": [
          "MyGroups"
        ],
        "summary": "Delete a game from the group",
        "description": "Deletes a game from a group and returns the updated group.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group to remove the game from",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "Game id to remove",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "TDBWC34HVY"
          }
        ],
        "responses": {
          "200": {
            "description": "Game removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "No query indicated in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissingParameter"
                }
              }
            }
          },
          "401": {
            "description": "Missing API token. The user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthenticated"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "502": {
            "description": "API is not responding,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtSrvFail"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "AppErrorInfo": {
        "description": "Additional information about the error",
        "nullable": true,
        "anyOf": [
          {
            "type": "object"
          },
          {
            "type": "string"
          },
          {
            "type": "integer"
          },
          {
            "type": "number"
          }
        ],
        "example": "..."
      },
      "MissingParameter": {
        "type": "object",
        "description": "Application error",
        "required": [
          "code",
          "name",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "format": "int32",
            "description": "Missing Parameter",
            "example": 1003
          },
          "name": {
            "type": "string",
            "description": "Misssing Parameter",
            "example": "MISSING_PARAMETER"
          },
          "message": {
            "type": "string",
            "description": "A required parameter is missing",
            "example": "A required parameter is missing"
          },
          "info": {
            "$ref": "#/components/schemas/AppErrorInfo"
          }
        }
      },
      "Unauthenticated": {
        "type": "object",
        "description": "Application error",
        "required": [
          "code",
          "name",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "format": "int32",
            "description": "Invalid or missing token",
            "example": 1006
          },
          "name": {
            "type": "string",
            "description": "Invalid or missing token",
            "example": "UNAUTHENTICATED"
          },
          "message": {
            "type": "string",
            "description": "Invalid or missing token",
            "example": "Invalid or missing token"
          },
          "info": {
            "$ref": "#/components/schemas/AppErrorInfo"
          }
        }
      },
      "NotFound": {
        "type": "object",
        "description": "Application error",
        "required": [
          "code",
          "name",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "format": "int32",
            "description": "The item does not exist",
            "example": 1001
          },
          "name": {
            "type": "string",
            "description": "The item does not exist",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "description": "The item does not exist",
            "example": "The item does not exist"
          },
          "info": {
            "$ref": "#/components/schemas/AppErrorInfo"
          }
        }
      },
      "ExtSrvFail": {
        "type": "object",
        "description": "Application error",
        "required": [
          "code",
          "name",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "format": "int32",
            "description": "External service failure",
            "example": 1002
          },
          "name": {
            "type": "string",
            "description": "External service failure",
            "example": "EXT_SVC_FAIL"
          },
          "message": {
            "type": "string",
            "description": "External service failure",
            "example": "External service failure"
          },
          "info": {
            "$ref": "#/components/schemas/AppErrorInfo"
          }
        }
      },
      "GameListResponse": {
        "type": "object",
        "description": "Response with a list of games",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/Game"
          }
        }
      },
      "Game": {
        "type": "object",
        "description": "Game data",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal game id",
            "example": "Ho3JtwEACAAJ"
          },
          "name": {
            "type": "string",
            "description": "The game title",
            "example": "Root"
          },
          "publisher": {
            "type": "string",
            "description": "The game publisher",
            "example": "Leder Games"
          },
          "rules_url": {
            "type": "string",
            "description": "Game's rule url",
            "example": "https://drive.google.com/drive/folders/1i9-iCUDzfGMs7HjFHhahwMS6efvvfX5w"
          },
          "price": {
            "type": "integer",
            "description": "Game's price",
            "example": 15
          },
          "min_age": {
            "type": "integer",
            "example": 4
          },
          "min_player": {
            "type": "integer",
            "example": 2
          },
          "rank": {
            "type": "integer",
            "description": "Game's popularity in the site",
            "example": 1
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User data",
        "required": [
          "token",
          "username"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Group": {
        "type": "object",
        "description": "Group data",
        "required": [
          "name",
          "description",
          "games"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "games": {
            "type": "object",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "AddGroupHeader": {
        "type": "object",
        "description": "Group data",
        "required": [
          "Name",
          "Description"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          }
        }
      },
      "EditGroupHeader": {
        "type": "object",
        "description": "Group data",
        "required": [
          "Name",
          "Description"
        ],
        "properties": {
          "groupId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          }
        }
      },
      "ListedGroup": {
        "type": "object",
        "description": "a group on the list of groups",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "games": {
            "type": "object"
          }
        }
      },
      "ListGroup": {
        "type": "object",
        "description": "List of groups",
        "properties": {
          "groupId": {
            "$ref": "#/components/schemas/ListedGroup"
          }
        }
      },
      "AddGame": {
        "type": "object",
        "description": "Group data",
        "required": [
          "Name",
          "Description"
        ],
        "properties": {
          "groupId": {
            "type": "string"
          },
          "gameId": {
            "type": "string"
          }
        }
      },
      "GameDetails": {
        "type": "object",
        "description": "game details",
        "required": [
          "id",
          "name",
          "description",
          "url",
          "image_url",
          "mechanics",
          "categories"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal game id",
            "example": "Ho3JtwEACAAJ"
          },
          "name": {
            "type": "string",
            "description": "The game title",
            "example": "Root"
          },
          "description": {
            "type": "string",
            "description": "The game publisher",
            "example": "Leder Games"
          },
          "url": {
            "type": "string",
            "description": "Game's rule url",
            "example": "https://drive.google.com/drive/folders/1i9-iCUDzfGMs7HjFHhahwMS6efvvfX5w"
          },
          "image_url": {
            "type": "integer",
            "description": "Game's price",
            "example": 15
          },
          "mechanics": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Acting"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Action"
            }
          }
        }
      }
    }
  }
}